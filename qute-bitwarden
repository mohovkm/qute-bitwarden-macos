#!/Users/konstantinmohov/.qutebrowser/userscripts/.venv/bin/python3

# Copyright 2017 Chris Braun (cryzed) <cryzed@googlemail.com>
# Adapted for Bitwarden by Jonathan Haylett (JonnyHaystack) <jonathan@haylett.dev>
# Adapted for MacOS by Konstantin Mokhov <zsprogrammer3@gmail.com>
#
# This file is part of qutebrowser.
#
# qutebrowser is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# qutebrowser is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with qutebrowser.  If not, see <https://www.gnu.org/licenses/>.

"""
Insert login information using Bitwarden CLI and a MacOS defined menu (using osascript).
"""

USAGE = """The domain of the site has to be in the name of the Bitwarden entry, for example: "github.com/cryzed" or
"websites/github.com".  The login information is inserted by emulating key events using qutebrowser's fake-key command in this manner:
[USERNAME]<Tab>[PASSWORD], which is compatible with almost all login forms.

If enabled, with the `--totp` flag, it will also move the TOTP code to the
clipboard, much like the Firefox add-on.

You must log into Bitwarden CLI using `bw login` prior to use of this script.
The session key will be stored using keyctl for the number of seconds passed to
the --auto-lock option.

To use in qutebrowser, run: `spawn --userscript qute-bitwarden`
"""

EPILOG = """Dependencies: tldextract (Python 3 module), pyperclip (optional
Python module, used for TOTP codes), Bitwarden CLI (1.7.4 is known to work
but older versions may well also work)

WARNING: The login details are viewable as plaintext in qutebrowser's debug log
(qute://log) and might be shared if you decide to submit a crash report!"""


import enum
import functools
import json
import logging
import os
import subprocess
import sys
from typing import List

import click
import keyring
import tldextract

logger = logging.getLogger(__name__)

USERNAME = os.getlogin()

stderr = functools.partial(print, file=sys.stderr)


class ExitCodes(enum.IntEnum):
    SUCCESS = 0
    FAILURE = 1
    # 1 is automatically used if Python throws an exception
    NO_PASS_CANDIDATES = 2
    COULD_NOT_MATCH_USERNAME = 3
    COULD_NOT_MATCH_PASSWORD = 4


def qute_command(command):
    with open(os.environ["QUTE_FIFO"], "w") as fifo:
        fifo.write(command + "\n")
        fifo.flush()


def ask_password():
    process = subprocess.run(
        [
            "/usr/bin/osascript",
            "-e",
            """\
            application \"System Events\"
            activate
            set the answer to text returned of (display dialog \"Enter your Bitwarden Master Password:\" \
            default answer "" with hidden answer buttons {\"Continue\"} default button 1)
        """,
        ],
        stdout=subprocess.PIPE,
    )
    if process.returncode > 0:
        raise Exception("Could not unlock vault")
    master_pass = process.stdout.strip()
    code = subprocess.run(
        ["/usr/local/bin/node", "/opt/homebrew/bin/bw", "unlock", "--raw", master_pass],
        stdout=subprocess.PIPE,
        stderr=subprocess.PIPE,
    )
    return code


def get_session_key(auto_lock, renew: bool = False):
    if auto_lock == 0 or renew:
        keyring.delete_password(USERNAME, "bw_session")

    session = keyring.get_password(USERNAME, "bw_session")
    if not session:
        session = ask_password()
        if session.stderr:
            logger.error("Error from subprocess: %s", session.stderr.strip())
            raise Exception("Could not unlock Vault")
        session = session.stdout.strip()
        if auto_lock != 0:
            keyring.set_password(USERNAME, "bw_session", session.decode("utf-8"))
    return session


def pass_(
    domain, encoding, auto_lock, renew: bool = False, second_attempt: bool = False
):
    session_key = get_session_key(auto_lock, renew)
    process = subprocess.run(
        [
            "/usr/local/bin/node",
            "/opt/homebrew/bin/bw",
            "list",
            "items",
            "--session",
            session_key,
            "--url",
            domain,
        ],
        stdout=subprocess.PIPE,
        stderr=subprocess.PIPE,
    )

    err = process.stderr.decode(encoding).strip()
    if err:
        if "mac failed" in err and not second_attempt:
            return pass_(domain, encoding, auto_lock, True, True)
        msg = "Bitwarden CLI returned for {:s} - {:s}".format(domain, err)
        stderr(msg)

    if process.returncode:
        return "[]"

    out = process.stdout.decode(encoding).strip()

    return out


def get_totp_code(selection_id, domain_name, encoding, auto_lock):
    session_key = get_session_key(auto_lock)
    process = subprocess.run(
        [
            "/usr/local/bin/node",
            "/opt/homebrew/bin/bw",
            "get",
            "totp",
            "--session",
            session_key,
            selection_id,
        ],
        stdout=subprocess.PIPE,
        stderr=subprocess.PIPE,
    )

    err = process.stderr.decode(encoding).strip()
    if err:
        # domain_name instead of selection_id to make it more user-friendly
        msg = "Bitwarden CLI returned for {:s} - {:s}".format(domain_name, err)
        stderr(msg)

    if process.returncode:
        return "[]"

    out = process.stdout.decode(encoding).strip()

    return out


def fake_key_raw(text):
    # remove all characters from input
    qute_command("fake-key <Alt-Backspace>")
    for character in text:
        # Escape all characters by default, space requires special handling
        sequence = '" "' if character == " " else "\{}".format(character)
        qute_command("fake-key {}".format(sequence))


def ask_for_choice(choices: List[str], username_only: bool, password_only: bool):
    choices_str = "{" + ", ".join(f'"{w}"' for w in choices) + "}"
    default = "{" + f'"{choices[0]}"' + "}"
    additinal_text = (
        "[Username only]"
        if username_only
        else "[Password only]"
        if password_only
        else ""
    )
    process = subprocess.run(
        [
            "/usr/bin/osascript",
            "-e",
            """\
            set thePassChoices to {choices} \n
            set the result to choose from list thePassChoices with prompt \"Select your item to fill the data: \
                    {additinal_text}\" \
            default items {default} \n
            return result
            """.format(
                choices=choices_str,
                default=default,
                additinal_text=additinal_text,
            ),
        ],
        stdout=subprocess.PIPE,
    )
    if process.returncode > 0:
        raise Exception(
            "Could not get information from choices. Either code or system error."
        )
    chose = process.stdout.strip()
    return chose


@click.command()
@click.option("--url", type=str, default=os.getenv("QUTE_URL"))
@click.option(
    "--no-insert-mode", type=bool, help="Don't automatically enter insert mode"
)
@click.option("--totp", type=bool, help="Copy TOTP key to clipboard")
@click.option(
    "--io-encoding",
    type=str,
    default="UTF-8",
    help="Encoding used to communicate with subprocesses",
)
@click.option(
    "--merge-candidates",
    type=bool,
    help="Merge pass candidates for fully-qualified and registered domain name",
)
@click.option(
    "--auto-lock",
    type=int,
    default=900,
    help="Automatically lock the vault after this many seconds",
)
@click.option("--username-only", type=bool, help="Only insert username")
@click.option("--password-only", type=bool, help="Only insert password")
@click.option("--totp-only", type=bool, help="Only insert totp code")
def main(
    url: str,
    no_insert_mode: bool,
    totp: bool,
    io_encoding: bool,
    merge_candidates: bool,
    auto_lock: int,
    username_only: bool,
    password_only: bool,
    totp_only: bool,
    *args,
    **kwargs,
):
    if not url:
        return ExitCodes.FAILURE

    extract_result = tldextract.extract(url)

    # Try to find candidates using targets in the following order: fully-qualified domain name (includes subdomains),
    # the registered domain name and finally: the IPv4 address if that's what
    # the URL represents
    candidates = []
    for target in filter(
        None,
        [
            extract_result.fqdn,
            extract_result.registered_domain,
            extract_result.subdomain + extract_result.domain,
            extract_result.domain,
            extract_result.ipv4,
        ],
    ):
        target_candidates = json.loads(
            pass_(
                target,
                io_encoding,
                auto_lock,
            )
        )
        if not target_candidates:
            continue

        candidates = candidates + target_candidates
        if not merge_candidates:
            break
    else:
        if not candidates:
            stderr("No pass candidates for URL {!r} found!".format(url))
            return ExitCodes.NO_PASS_CANDIDATES

    choices = []
    for c in candidates:
        if not c:
            continue
        name = c["name"] or "[name not specified]"
        username = c["login"]["username"] or "[username not specified]"
        choices.append("{:s} | {:s}".format(name, username))
    choice = ask_for_choice(choices, username_only, password_only).decode("utf-8")
    choice_tokens = choice.split("|")
    choice_name = choice_tokens[0].strip()
    choice_username = choice_tokens[1].strip()
    selection = [
        c
        for c in candidates
        if c["name"] == choice_name and c["login"]["username"] == choice_username
    ]

    # Nothing was selected, simply return
    if not selection:
        return ExitCodes.SUCCESS

    selection = selection[0]
    username = selection["login"]["username"]
    password = selection["login"]["password"]
    totp = selection["login"]["totp"]

    if username_only and username:
        fake_key_raw(username)
    elif password_only and password:
        fake_key_raw(password)
    elif totp_only:
        # No point in moving it to the clipboard in this case
        fake_key_raw(
            get_totp_code(
                selection["id"],
                selection["name"],
                io_encoding,
                auto_lock,
            )
        )
    else:
        # Enter username and password using fake-key and <Tab> (which seems to work almost universally), then switch
        # back into insert-mode, so the form can be directly submitted by
        # hitting enter afterwards
        if username:
            fake_key_raw(username)
            qute_command("fake-key <Tab>")
        if password:
            fake_key_raw(password)
            qute_command("fake-key <Shift-Tab>")

    if not no_insert_mode:
        qute_command("mode-enter insert")

    # If it finds a TOTP code, it copies it to the clipboard,
    # which is the same behavior as the Firefox add-on.
    if not totp_only and totp and totp:
        # The import is done here, to make pyperclip an optional dependency
        import pyperclip

        pyperclip.copy(
            get_totp_code(
                selection["id"],
                selection["name"],
                io_encoding,
                auto_lock,
            )
        )

    return ExitCodes.SUCCESS


if __name__ == "__main__":
    sys.exit(main())
